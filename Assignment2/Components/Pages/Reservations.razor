@page "/reservations"

@using Assignment2.Models;
@using System.Text;


<style>
    * {
        box-sizing: border-box;
    }

    /* Create two equal columns that floats next to each other */
    .column {
        float: left;
        width: 50%;
        padding: 10px;
        height: 350px;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    .ColumnB {
        content: "";
        display: table;
        clear: both;
    }

    .myself .property {
        width: 25%;
        display: inline-block;
        box-sizing: border-box;
        text-align: right;
    }

    .myself .value {
        text-align: left;
        padding-left: 10px;
        width: 70%;
        display: inline-block;
        box-sizing: border-box;
    }


    .container {
        position: relative;
    }

    .center {
        position: absolute;
        left: 50%;
    }

    .columnC {
        float: left;
        width: 100%;
        padding: 10px;
        height: 150px;
        box-sizing: border-box;
    }

    .columnB {
        clear: both;
        width: 100%;
        padding: 10px;
        height: 150px;
        margin-top: 450px;
    }

    .columnD {
        clear: both;
        width: 100%;
        padding-top: 130px;
        height: 350px;
       
    }

    .myself .valueC {
        text-align: left;
        padding-left: 10px;
        width: 70%;
        display: inline-block;
        box-sizing: border-box;
    }

    .myself .propertyC {
        width: 25%;
        display: inline-block;
        box-sizing: border-box;
        text-align: right;
    }

    .form-control {
        width: 100%;
    }

    .button1 {
        width: 300px;
    }
</style>

<div class="row">
    <div class="container">
        <h2 class="text-center p-2">Reservations Finder</h2>
        <div class="row">
            <div class="col-sm-3">
                <label for="explicit-label-name">Code: </label>
                <input class="form-control" type="text" id="code" name="Code" @bind="inputResCode">
            </div>
            <div class="col-sm-3">
                <label for="explicit-label-name">Airline: </label>
                <input class="form-control" type="text" id="code" name="Airline" @bind="inputAirline">
                @*<select class="form-control" @bind="newAirline">
                    @if (airlines == null)
                    {
                        <option>Loading...</option>
                    }
                    else
                    {
                        @foreach (var a in airlines)
                        {
                            <option value="@a">@a</option>
                        }
                    }
                </select>*@
            </div>
            <div class="col-sm-3">
                <label for="explicit-label-name">Name: </label>
                <input class="form-control" type="text" id="code" name="Name" @bind="inputName">
            </div>
            <div class="col-sm-3">
                <label for="explicit-label-name"> </label>
                <button class="btn btn-primary form-control" @onclick="@SearchReservations">Find Reservations</button>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="columnC myself">
        <div class="row">
            <h2 class="text-center p-2">Reservations</h2>
        </div>
        <select class="form-control" onfocus="this.selectedIndex = -1;" @bind="currentReservation">
            @if (resNew.Count() == 0)
            {
                <option>Select your reservation from this list</option>
            }
            else
            {
                @foreach (var res in resNew)
                {
                    <option value="@res.Code"> @res.Code, @res.FlightCode, @res.Airline, @res.Cost, @res.Name, @res.Citizenship, @res.Active </option>
                }
            }
        </select>
    </div>
</div>

<div class="row">
    <div class="columnC myself">
        <div class="row">
            <h2 class="text-center p-2">Reserve</h2>
        </div>
        <div>
            <label>Reservation Code:</label><input class="form-control" type="text" placeholder="Reservation Code" value="@inputResCode" />
            <label>Flight Code:</label><input class="form-control" type="text" placeholder="Flight Code" value="@inputflightCode" />
            <label>Airline:</label><input class="form-control" type="text" placeholder="Airline" value="@inputAirline" />
            <label>Cost:</label><input class="form-control" type="text" placeholder="Cost" value="@inputCost" />
            <label>Name:</label><input class="form-control" type="text" placeholder="Name" @bind="inputName" />
            <label>Citizenship:</label><input class="form-control" type="text" placeholder="Citizenship" @bind="inputCitizenship" />
            <label>Status:</label><input class="form-control" type="text" placeholder="Status" @bind="inputStatus" />
        </div>
        <br />

        <div class="row">
            <div class="center">
                <button class="btn btn-primary button1" @onclick="SaveReservations">Save</button>
            </div>
        </div>
    </div>
</div>
    

@code {
    string inputResCode;
    string inputflightCode;
    string inputAirline;
    string inputName = "";
    string inputCost;
    string inputCitizenship = "";
    string inputStatus = "";
    string currentReservation;

    ReservationManager rm = new ReservationManager();
    List<Reservation> reservations;
    List<Reservation> resNew = new List<Reservation>();

    /*This is the method called after the "Find Flights" button is clicked.
     * It will find reserved flights from reservation.csv file according to
     * user inputs of reservation code and/or airline and/or name.
    */
    private void SearchReservations()
    {
        reservations = ReservationManager.GetReservations();
        resNew.Clear();
        Reservation NewReservation;

        if ((inputResCode != "") && (inputAirline != "") && (inputName != ""))
        {
            foreach (var res in reservations)
            {
                if (((inputResCode != "") && (inputResCode.ToUpper() == res.Code.ToUpper())) &&
                    ((inputAirline != "") && (inputAirline.ToUpper() == res.Airline.ToUpper())) &&
                    ((inputName != "") && (inputName.ToUpper() == res.Name.ToUpper())))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                // TODO
                // add other cases to be able to find flight by code and/or name and/or airline
                else if ((inputResCode != "") && (inputResCode.ToUpper() == res.Code.ToUpper()))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                else if ((inputAirline != "") && (inputAirline.ToUpper() == res.Code.ToUpper()))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                else if ((inputName != "") && (inputName.ToUpper() == res.Code.ToUpper()))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
            }
        }
        else
        {
            resNew = reservations;
        }
    }
    /*This is the method called after the "Find Flights" button is clicked.
    * It will find reserved flights from reservation.csv file according to
    * user inputs of reservation code and/or airline and/or name.
    */
    private void SaveReservations()
    {
        var reservationToSave = reservations.FirstOrDefault(r => r.Code == currentReservation);

        if (reservationToSave != null)
        {
            reservationToSave.Name = inputName;
            reservationToSave.Citizenship = inputCitizenship;

            Reservation SavedReservations = new Reservation(reservationToSave.Code, reservationToSave.FlightCode, reservationToSave.Airline, reservationToSave.Cost, reservationToSave.Name, reservationToSave.Citizenship, reservationToSave.Active);
            resNew.Add(SavedReservations);

        }

        foreach (var res in reservations)
        {
            if (currentReservation == res.Code)
            {
                rm.UpdateReservation(res);
                break;
            }                
        }

        reservations.Clear();
        reservations = ReservationManager.GetReservations();
        Reservation savedReservation = new Reservation();
        resNew.Clear();
        foreach (var res in reservations)
        {
            if (currentReservation.ToUpper() == res.Code.ToUpper())             
            {
                savedReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                resNew.Add(savedReservation);
                break;
            }          
        }
    }
}
